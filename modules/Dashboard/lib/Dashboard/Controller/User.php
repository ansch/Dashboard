<?php
/**
 * Dashboard.
 *
 * @copyright André Schöne
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Dashboard
 * @author André Schöne <andre.schoene@onlinehome.de>.
 * @link http://www.schoenes-neue-welt.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Mon Apr 30 15:09:50 CEST 2012.
 */

/**
 * This is the User controller class providing navigation and interaction functionality.
 */
class Dashboard_Controller_User extends Dashboard_Controller_Base_User
{   
    public function editmode($args)
        {
        $editmode = isset($args['editmode']) ? false : FormUtil::getPassedValue('editmode', null, 'GET');
        if ($editmode !== null) {
            SessionUtil::setVar('DashboardEditMode', $editmode);
        } else {
            $editmode = SessionUtil::getVar('DashboardEditMode', null);
        }
        return System::redirect(System::getHomepageUrl());
        
    }
    
    public function main($args)
        {
        $editmodesession = SessionUtil::getVar('DashboardEditMode', null);        
        $editmode = isset($editmodesession) ? $editmodesession : false;   

// TODO
//        if ($editmode) {
//            $this->view->setCaching(false);
//        }
//        $this->view->setCacheId("$pageId|$versionId");
//        if ($this->view->is_cached('user/main.tpl')) {
//            return $this->view->fetch('user/main.tpl');
//        }
        $settings = ModUtil::getVar('Dashboard');
        if (!UserUtil::isLoggedIn()) {
            $module = $settings['ExternalStartpage'];
            $type   = ($settings['ExternalStarttype'] == '') ? 'user' : $settings['ExternalStarttype'];
            $func   = ($settings['ExternalStartfunc'] == '') ? 'main' : $settings['ExternalStartfunc'];	    
            $args   = explode(',', $settings['ExternalStartargs']);
            $arguments = array();
            foreach ($args as $arg) {
                if (!empty($arg)) {
                    $argument = explode('=', $arg);
                    $arguments[$argument[0]] = $argument[1];
                    System::queryStringSetVar($argument[0], $argument[1]);
                }
            }		
                return ModUtil::exec($module, $type, $func);
        } else {
            if ($settings['AllowCustomizing'] == 1) {
                    $size = 0;
                    // Get boxes and templates
                    //$templates 	= ModUtil::apiFunc('Dashboard','user','getTemplates');
                    $boxes 		= ModUtil::apiFunc('Dashboard','user','getBoxes',array('block'=>0));
                    //$templates 	= ModUtil::apiFunc('Dashboard','user','filterTemplates',array ('boxes' => $boxes, 'templates' => $templates));
                    // If there are no boxes defined for users reset to default_config
                    if (!$boxes || !(count($boxes) > 0)) {
                            $authid = SecurityUtil::generateAuthKey();
                            $result = ModUtil::apiFunc('Dashboard','user','reset');
                            //return pnRedirect(pnModURL('Dashboard','user','reset',array('authid' => $authid)));
                        if ($result == true) {
                            $boxes = ModUtil::apiFunc('Dashboard','user','getBoxes',array('block'=>0));                            
                        }
                    }                
                    for ($i=0; $i < count($boxes); $i++) {
                            $result = ModUtil::apiFunc('Dashboard','user','getBoxCode',array('box' => $boxes[$i],
                                                                                                'allowEdit' => $editmode));
                            $boxes[$i]['boxcode'] = $result;
                    }
                    if ($editmode) {
                        $plugins = ModUtil::apiFunc('Dashboard','user','getOpenPlugins');
                        $this->view->assign('plugins', $plugins); 
                    }
                    // Assign to template
                    //$this->view->assign('templates',$templates);
                    $this->view->assign('editmode', $editmode);                  
                    $this->view->assign('boxes', $boxes);
                    $this->view->assign('boxes_uname', UserUtil::getVar('uname'));
                    $this->view->assign('authid', SecurityUtil::generateAuthKey());
                    // Return output
                    return $this->view->fetch('user/main.tpl');
            } else {
                $module = $settings['InternalStartpage'];
                $type   = ($settings['InternalStarttype'] == '') ? 'user' : $settings['InternalStarttype'];
                $func   = ($settings['InternalStartfunc'] == '') ? 'main' : $settings['InternalStartfunc']; 
                $args   = explode(',', $settings['InternalStartargs']);
                $arguments = array();
                foreach ($args as $arg) {
                    if (!empty($arg)) {
                        $argument = explode('=', $arg);
                        $arguments[$argument[0]] = $argument[1];
                        System::queryStringSetVar($argument[0], $argument[1]);
                    }
                }		
                    return ModUtil::exec($module, $type, $func);			
            }
        }
    }

    /**
     * This method provides a generic handling of simple delete requests.
     *
     * @param string  $ot           Treated object type.
     * @param int     $id           Identifier of entity to be deleted.
     * @param boolean $confirmation Confirm the deletion, else a confirmation page is displayed.
     * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
     * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
     * @return mixed Output.
     */
    public function delete($args)
        {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('Dashboard::', '::', ACCESS_DELETE));
        // DEBUG: permission check aspect ends

        // parameter specifying which type of objects we are treating
        $objectType = (isset($args['ot']) && !empty($args['ot'])) ? $args['ot'] : $this->request->getGet()->filter('ot', 'boxes', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'delete');
        if (!in_array($objectType, Dashboard_Util_Controller::getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = Dashboard_Util_Controller::getDefaultObjectType('controllerAction', $utilArgs);
        }
        
  	$args['box'] 	= (string) FormUtil::getPassedValue('box');
  	$args['id']  	= (int) FormUtil::getPassedValue('id');
  	$args['userid'] = (int) FormUtil::getPassedValue('userid',0);
	if ($args['userid'] <> -1) {
		$args['userid'] = UserUtil::getVar('uid');
	}
        $args['returnfunc'] 	= (string) FormUtil::getPassedValue('returnfunc');        
        $idFields = array ('id');
        // retrieve identifier of the object we wish to delete
        $idValues = Dashboard_Util_Controller::retrieveIdentifier($this->request, $args, $objectType, $idFields);
        $hasIdentifier = Dashboard_Util_Controller::isValidIdentifier($idValues);

        $this->throwNotFoundUnless($hasIdentifier, $this->__('Error! Invalid identifier received.'));

        $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => $objectType, 'id' => $idValues));
        $this->throwNotFoundUnless($entity != null, $this->__('No such item.'));
        //todo: (testweiae auch mal rausnehmen
        $args['confirmation'] = true;
        $confirmation = (bool)(isset($args['confirmation']) && !empty($args['confirmation'])) ? $args['confirmation'] : $this->request->getPost()->filter('confirmation', false, FILTER_VALIDATE_BOOLEAN);

        if ($confirmation) {
            //todo:
            //$this->checkCsrfToken();

            // TODO call pre delete validation hooks
            $this->entityManager->remove($entity);
            $this->entityManager->flush();
            $this->registerStatus($this->__('Done! Item deleted.'));
            // TODO call post delete process hooks

            // clear view cache to reflect our changes
            $this->view->clear_cache();

            // redirect to the list of the current object type
            if ($args['returnfunc'] != 'main') {
            $this->redirect(ModUtil::url($this->name, 'user', 'view',
                array('ot' => $objectType)));
            } else {
                return System::redirect(System::getBaseUrl());  
            }
        }

        $repository = $this->entityManager->getRepository('Dashboard_Entity_' . ucfirst($objectType));

        // assign the object we loaded above
        $this->view->assign($objectType, $entity)
            ->assign($repository->getAdditionalTemplateParameters('controllerAction', $utilArgs));
        // fetch and return the appropriate template
        if ($args['returnfunc'] != 'main') {
        return Dashboard_Util_View::processTemplate($this->view, 'user', $objectType, 'delete', $args);
        } else {
        return System::redirect(System::getBaseUrl());   
        }
    }

    public function switchPosition()
        {
            $box1 = (int) FormUtil::getPassedValue('box1');
            $box2 = (int) FormUtil::getPassedValue('box2');
            $userid  	= (int) FormUtil::getPassedValue('userid',0);
            if ($userid <> -1) {
                    $userid = UserUtil::getVar('uid');
            }
            // Little validation check
            if (($box1 == 0) || ($box2 == 0) || !UserUtil::isLoggedIn()) {
                return System::redirect(ModUtil::url('Dashboard'));
            }
            // Switch the boxes
            $result = ModUtil::apiFunc('Dashboard','user','switchPosition',array('box1' => $box1, 'box2' => $box2, 'userid' => $userid));
            if (!$result) {
                    LogUtil::registerError('Box could not be moved! An error occured.');
            }
            // Redirect
            if ($userid == -1) {
                    return System::redirect(ModUtil::url('Dashboard','admin','defaultConfig'));
            } else {
                    return System::redirect(System::getBaseUri());
            }	
    }  

    public function addBox()
        {
            // Get Parameter and do a little security check
            $box 	= FormUtil::getPassedValue('box');
            $block 	= FormUtil::getPassedValue('block',0);
            $page 	= FormUtil::getPassedValue('page',1);
            $dbposition 	= (int)FormUtil::getPassedValue('dbposition');
            if (!isset($box) || ($box == '') || !UserUtil::isLoggedIn()) {
                return System::redirect(ModUtil::url('Dashboard'));
            }
            // Add new box
            $userid = UserUtil::getVar('uid');
            $result = ModUtil::apiFunc('Dashboard','user','addBox',array('userid' => $userid, 
                                                                            'box' => $box, 
                                                                            'dbposition' => $dbposition,
                                                                            'block' => $block,
                                                                            'page' => $page));
            if (!$result) {
                    LogUtil::registerError(_BOXES_ADD_ERROR);
            } else {
                    LogUtil::registerStatus(_BOXES_BOX_ADDED);
            }
            // Clean order values
            ModUtil::apiFunc('Dashboard','user','cleanOrder',array('userid' => $userid,
                                                                    'block' => $block,
                                                                    'page' => $page));

            // Redirect to main page
            return System::redirect(System::getBaseUrl());
    }

    public function reset()
        {
            // Check authid and make little security check
            if (!UserUtil::isLoggedIn()
    //	  || !(SecurityUtil::confirmAuthKey())
            ) {
                LogUtil::registerError(_BOXES_AUTH_OR_PERM_ERROR);
                return System::redirect(ModUtil::url('Dashboard'));
            }

            $result = ModUtil::apiFunc('Dashboard','user','reset');
            if ($result) {
                    LogUtil::registerStatus(_BOXES_RESET_DONE);
            } else {
                    LogUtil::registerError(_BOXES_RESET_ERROR);
            }

            // Redirect to main boxes page
            return System::redirect(ModUtil::url('Dashboard','user','create'));
    }   
}
