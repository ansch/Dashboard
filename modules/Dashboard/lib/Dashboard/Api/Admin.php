<?php
/**
 * Dashboard.
 *
 * @copyright André Schöne
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Dashboard
 * @author André Schöne <andre.schoene@onlinehome.de>.
 * @link http://www.schoenes-neue-welt.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Thu Jun 07 13:38:24 CEST 2012.
 */

/**
 * This is the Admin api helper class.
 */
class Dashboard_Api_Admin extends Dashboard_Api_Base_Admin
{
        /**
     * get available Admin panel links
     *
     * @return array Array of admin links
     */
    public function getlinks()
        {
        $links = array();

        if (SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_READ)) {
            $links[] = array('url' => System::getBaseUri(),
                             'text' => $this->__('Frontend'),
                             'title' => $this->__('Switch to user area.'),
                             'class' => 'z-icon-es-home');
            $links[] = array('url' => ModUtil::url($this->name, 'admin', 'commonSettings'),
                             'text' => $this->__('Common Settings'),
                             'title' => $this->__('Edit Common Settings'),
                             'class' => '');            
            $links[] = array('url' => ModUtil::url($this->name, 'admin', 'pluginConfig'),
                             'text' => $this->__('Plugin Configuration'),
                             'title' => $this->__('Edit Plugin Configuration'),
                             'class' => '');
            $links[] = array('url' => ModUtil::url($this->name, 'admin', 'defaultConfig'),
                             'text' => $this->__('Default Configuration'),
                             'title' => $this->__('Edit Default Configuration'),
                             'class' => '');
        }
        return $links;
    }
    
        /**
     * @desc    Update attributes of a plugin.
     *
     * @param int $args ['id'] the ID of the block to update.
     * @param string $args ['active'] the new title of the block.
     * @param string $args ['name'] the new description of the block.
     * @param string $args ['title'] the new positions of the block.
     * @param string $args ['boxsize'] the new URL of the block.
     * @param string $args ['pluginfile'] the new language of the block.
     * @param string $args ['ajax'] the new content of the block.
     *
     * @return boolean.
     */
    public function update($args)
        {
        // Argument check
        if (!isset($args['id']) || !is_numeric($args['id']) ||
            !isset($args['active']) ||
            !isset($args['name']) ||
            !isset($args['title']) ||
            !isset($args['boxsize']) ||
            !isset($args['pluginfile']) ||
            !isset($args['ajax'])) {
            return LogUtil::registerArgsError();
        }
        
        // update item
        $item = ModUtil::apiFunc('Dashboard', 'user', 'getPlugin', array('id' => $args['id']));
        $item->merge($args);

        $this->entityManager->flush();

        return true;
    }
    
        /**
     * @desc    This method updates the list aof available plugins. It called at controller->admin->pluginsReload.
     *
     * @return $indexed_plugins.
     */  
    public function pluginsReload($args)
        {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('Dashboard::', '::', ACCESS_ADMIN));
        // DEBUG: permission check aspect ends

        // parameter specifying which type of objects we are treating
        $objectType = (isset($args['ot']) && !empty($args['ot'])) ? $args['ot'] : $this->request->getGet()->filter('ot', 'plugin', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'admin', 'action' => 'pluginsReload');
        if (!in_array($objectType, Dashboard_Util_Controller::getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = Dashboard_Util_Controller::getDefaultObjectType('controllerAction', $utilArgs);
        }
        $dql = "SELECT id FROM Dashboard_Entity_Plugin id";
        $dql .= " INDEX BY id.name";
        $em = ServiceUtil::getService('doctrine.entitymanager');
        $query = $em->createQuery($dql);
        $indexed_plugins =  $query->getArrayResult(); // hydrate result to array
        $PluginDir= 'modules/Dashboard/plugins';
        $files = FileUtil::getFiles($PluginDir, false, true, 'class.php', 'f');

        foreach ($files as $file) {
            if (substr($file,0, 6) == 'plugin') {
    		$classname = str_replace('.class.php','',str_replace('plugin.','',$file));
    		Loader::requireOnce($PluginDir.'/'.$file);
    		$class='Plugin'.$classname;              
    		$rel_plugin = new $class;
    		$pName = $rel_plugin->name();
                $moduleactive = $indexed_plugins[$pName]['active'];
                    if (array_key_exists($pName,$indexed_plugins) && ModUtil::available($rel_plugin->module())) {
                        $indexed_plugins[$pName]['status'] = 'exists';
                        $indexed_plugins[$pName]['active'] = '1';                        
                    } elseif (array_key_exists($pName,$indexed_plugins) && !ModUtil::available($rel_plugin->module())) {
                        $indexed_plugins[$pName]['status'] = 'exists';
                        $indexed_plugins[$pName]['active'] = '-1';                        
                    } elseif (!array_key_exists($pName,$indexed_plugins) && ModUtil::available($rel_plugin->module())) {
                        $indexed_plugins[$pName]['name'] = $rel_plugin->name();  
                        $indexed_plugins[$pName]['title'] = $rel_plugin->title();
                        $indexed_plugins[$pName]['boxsize'] = $rel_plugin->size(); 
                        $indexed_plugins[$pName]['pluginfile'] = $PluginDir.'/'.$file;                         
                        $indexed_plugins[$pName]['status'] = 'new';
                        $indexed_plugins[$pName]['active'] = '1';  
                        $obj = array ('name'    => $pName,
                                        'title'   => $rel_plugin->title(),
                                        'boxsize'  => $rel_plugin->size(),
                                        'pluginfile'  => $PluginDir.'/'.$file,
                                        'active'  => '1');
                        $res = new Dashboard_Entity_Plugin;
                        $res->merge($obj);
                        $this->entityManager->persist($res);
                        $this->entityManager->flush();                        
                    } else {
                        $indexed_plugins[$pName]['name'] = $rel_plugin->name();  
                        $indexed_plugins[$pName]['title'] = $rel_plugin->title();
                        $indexed_plugins[$pName]['boxsize'] = $rel_plugin->size(); 
                        $indexed_plugins[$pName]['pluginfile'] = $PluginDir.'/'.$file;                         
                        $indexed_plugins[$pName]['status'] = 'new';
                        $indexed_plugins[$pName]['active'] = '-1'; 
                        $obj = array ('name'    => $pName,
                                        'title'   => $rel_plugin->title(),
                                        'boxsize'  => $rel_plugin->size(),
                                        'pluginfile'  => $PluginDir.'/'.$file,
                                        'active'  => '-1');
                        $res = new Dashboard_Entity_Plugin;
                        $res->merge($obj);
                        $this->entityManager->persist($res);
                        $this->entityManager->flush();                         
                    }
                }
            }
            
    $delete = array();            
    foreach ($indexed_plugins as $plugin)
    {          
    	if (!isset($plugin['status'])) {
    		$indexed_plugins[$plugin['name']]['status'] = 'delete';
                $delete[] = $plugin['id'];
    	}
    }
    if (!empty ($delete)) {
        $execdelete = $this->delete($delete);
    }
        
        // fetch, process and display template
        return $indexed_plugins;
    }  
    
        /**
     * @desc    This method deletes one ore more plugins from the database and is called at api->admin->reloadPlugins.
     *
     * @return return.
     */      
    public function delete($args)
        {
        foreach ($args as $object) {
            if ($object){
                $em = $this->entityManager;
                $delete = $this->entityManager->find('Dashboard_Entity_Plugin', $object);
                $em->remove($delete);
                $em->flush();
            }
        }
        return;
    }    
}