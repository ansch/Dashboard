<?php
/**
 * Dashboard.
 *
 * @copyright André Schöne
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Dashboard
 * @author André Schöne <andre.schoene@onlinehome.de>.
 * @link http://www.schoenes-neue-welt.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Thu May 03 12:43:34 CEST 2012.
 */

/**
 * This is the User api helper class.
 */
class Dashboard_Api_User extends Dashboard_Api_Base_User
{

    /**
     * @desc    This method adds a new user-box and is triggered at controller->user->addBox
     * 
     * @param int     $args['box']     Name of the Box.
     * @param int     $args['block']   set the 0 in any case so far
     * @param int     $args['page']    set the 1 in any case so far
     * @param int     $args['userid']  Identifier of the user.
     * @param int     $args['dbposition']   Postion of the new box, set to 0 by default 
     * @return boolean.
     */     
    public function addBox($args)
        {
            // Process parameters
            $userid 	= (int)$args['userid'];
            $dbposition = (int)$args['dbposition'];
            $block 	= ($args['block']=="") ? 0 :(int)$args['block'];
            $page 	= ($args['page']=="") ? 0 :(int)$args['page'];
            $box 	= $args['box'];

            // Check first if box was already added before
            $objectType = 'boxes';
            $entityClass = 'Dashboard_Entity_' . ucfirst($objectType);
            $repository = $this->entityManager->getRepository($entityClass);
            $where = "tbl.userid = $userid AND tbl.block=$block AND tbl.plugin = '".DataUtil::formatForStore($box)."'";
            $result = $repository->selectCount($where);        
            //$where = "udb_uid=$userid AND udb_block=$block AND udb_plugin = '".DataUtil::formatForStore($box)."'";
            //$result = DBUtil::selectObjectCount('dashboard_boxes',$where);
            if ($result != 0) {
                    LogUtil::registerError(_BOXES_BOX_ALREADY_ADDED);
                    return false;
            }

            // Construct object
            $obj = array (
                            'userid'=> $userid,
                            'plugin'=> $box,
                            'dbposition'=> $dbposition,
                            'page' 	=> $page,
                            'block' => $block
                    );

            // Add object
            $res = new Dashboard_Entity_Boxes;
            $res->merge($obj);
            $this->entityManager->persist($res);
            $this->entityManager->flush();       
            //$result = DBUtil::insertObject($obj,'dashboard_boxes');
            if (!$res) {
                    return false;
            } else {
                    // Clean Order and return success
                    $this->cleanOrder($obj);
                    return true;
            }
        }

    /**
     * @desc    This method cleans up the order of a users boxes when a new box is addded and is triggered at controller->user->addBox.
     * 
     * @param int     $args['block']   set the 0 in any case so far.
     * @param int     $args['page']    set the 1 in any case so far
     * @param int     $args['userid']  Identifier of the user.
     * 
     * @return boolean.
     */ 
    public function cleanOrder($args)
        {
                // Process parameters
                $userid = (int)$args['userid'];
                $page = (int)$args['page'];
                $block = (int)$args['block'];

                // Get all objects for current User 
                $objectType = 'boxes';
                $entityClass = 'Dashboard_Entity_' . ucfirst($objectType);
                $repository = $this->entityManager->getRepository($entityClass)->findBy(array('userid' => $userid, 'block' => $block), array('dbposition' => ASC, 'id' => DESC));
                $where = "tbl.userid = $userid AND tbl.block=$block";             
                $order = 'tbl.dbposition ASC, tbl.id DESC';
                $objects = $repository;
                //DBUtil::selectObjectArray('dashboard_boxes',$where,$order);
                $c = 0;
                //todo: anpassen dbutil raus
                foreach ($objects as $obj) {
                        $c++;
                        if ($obj['dbposition'] != $c) {
                                $obj['dbposition'] = $c;
                        }
                }
                $objects->persist;
                $this->entityManager->flush();
                
                return true;              
        } 

    /**
     * @desc    This method returns the meta-data of a box called at controller->user->main and controller->admin->defaultConfig.
     * 
     * @param int     $args['box']   box-counter.
     * @param int     $args['allowedit']Is editing allowed or not?
     * @param int     $args['blockid']  Identifier of the block.
     * @param string  $args['admin']  Is this method called by controller->admin or not?.
     * 
     * @return boolean.
     */     
    public function getBoxCode($args)
        {
            $box        = $args['box'];
            $allowEdit 	= $args['allowEdit'];
            $blockid	= isset($args['blockid']) ? $args['blockid'] : 1;
            $admin	= isset($args['admin']) ? $args['admin'] : false;

            if (!isset($box) || (!($box['id'] > 0))) {
                return false;
            }

            // assign it to the Template
            $render = Zikula_View::getInstance('Dashboard',false);        
            $render->assign('box', $box);
            $render->assign('blockid', $blockid);
            $render->assign('allowEdit', $allowEdit);
            $render->assign('admin', $admin);  

            return $render->fetch('user/singlebox.tpl');         
        } 

    /**
     * @desc    This method returns the data of a single box called at api->user->switchPosition.
     * 
     * @param int     $args['id']   Identifier of the box.
     * 
     * @return $item.
     */ 
    public function getBox($args)
        {
        // Argument check
        if (!isset($args['id']) || !is_numeric($args['id'])) {
            return LogUtil::registerArgsError();
        }

        // Return the item array
        $entity = $this->name . '_Entity_Boxes';
        $item = $this->entityManager->getRepository($entity)->findOneBy(array('id' => $args['id']));

        return $item;
    }

    /**
     * @desc    This method returns the data of all boxes of a user and puts them into an array.
     *          It is called at controller->user->main and controller->admin->defaultConfig.
     * 
     * @param int     $args['box']     Name of the Box.
     * @param int     $args['block']   set the 0 in any case so far.
     * @param int     $args['blockinfo']   unused so far.
     * @param int     $args['page']    set the 1 in any case so far.
     * @param int     $args['userid']  Identifier of the user.
     * 
     * @return $item.
     */         
    public function getBoxes($args)
        {
            $size = 0;
            if (!isset($args['block'])) {
                    $block = $args['block'];
            }            
            $blockinfo = $args['blockinfo'];
            $userid = (int)$args['userid'];
            if (!isset($args['userid']) || $userid=="") {
                    $userid = UserUtil::getVar('uid');
            }
            $where = "tbl.userid = $userid";
            if (isset($args['block'])) {
                    $where .= " AND tbl.block=$block";
            }         
            $dql = "SELECT id FROM Dashboard_Entity_Boxes id" .
                " WHERE id.userid = $userid ORDER BY id.dbposition ASC, id.id DESC";     
            $em = ServiceUtil::getService('doctrine.entitymanager');
            $query = $em->createQuery($dql);
            $boxes = $query->getArrayResult();
        
            //$boxes = Doctrine_Core::getTable('Dashboard_Model_Boxes')->findByDql($dql)->toArray();
            //$boxes = DBUtil::selectObjectArray('dashboard_boxes',$where,$order);
            $plugins = $this->getPlugins();
            if (!$boxes) {
                    return false;
            } else {
                    $res = array();
                    // Some extra code for sorting items
                    $previous = '';
                    $next = array();
                    $bid = $blockinfo['bid'];
                    foreach ($boxes as $box) {
                            $plugin = $plugins[$box['plugin']];
                            if (is_array($plugin)) {
                                    Loader::requireOnce($plugin['dbfile']);
                            $class=$plugin['name'];
                            $cplugin = new $class();
                        $box['title']   = $cplugin->title();
                        $box['dbsize'] 	= $cplugin->size();
                        $box['output'] 	= $cplugin->getContent();
                        $box['output'] 	= str_replace("class=\"pn-block pn-blockposition- pn-bkey- pn-bid-\"", "", $box['output']);

                        // Assign plugin that is on left side of actual object
                        $box['previous'] 	= (int)$previous;
                        $box['permanent'] 	= false; //$meta['permanent'];
                        $box['width'] 		= 32*(int)$box['dbsize'];
                        $next[$previous] 	= $box['id'];
                        $previous 			= $box['id'];
                        if ($size + $box['dbsize'] <= 3) {
                            $box['newline'] = false;
                        } else {
                            $box['newline'] = true;
                            $size = 0;
                        } 
                        $size += $box['dbsize'];
                        $res[] = $box;
                            }
    /*	  		
                            // Load file if not loaded yet
                            Loader::includeOnce('modules/UserDashBoard/plugins/plugin.'.$plugin['plugin'].'.inc');
                            $metadata = 'box_'.$plugin['plugin'].'_getMetaData';
                            $content  = 'box_'.$plugin['plugin'].'_getOutput';
                            if (function_exists($metadata) && ($metadata() != false)) {
                            $meta     = $metadata();
                            $content  = $content();
                        $plugin['title']  = $meta['title'];
                        $plugin['size']   = $meta['size'];
                        $plugin['output'] = $content;
                        // Assign plugin that is on left side of actual object
                        $plugin['previous'] = (int)$previous;
                        $plugin['permanent'] = $meta['permanent'];
                        $plugin['width'] = 33*(int)$plugin['size'];
                        $next[$previous] = $plugin['id'];
                        $previous = $plugin['id'];
                        if ($size + $plugin['size'] <= 3) {
                            $plugin['newline'] = false;
                        } else {
                            $plugin['newline'] = true;
                            $size = 0;
                        } 
                        $size += $plugin['size'];
                        $res[] = $plugin;
                }
    */            
                    }
                    // assign right item sort order information now
                    $res2 = array();
                    foreach ($res as $box) {
                            $box['next'] = (int)$next[$box['id']];
                            $res2[] = $box;
                    }
                    return $res2;
            }
    } 

    /**
     * @desc    This method gets a specific plugin
     *
     * @param    $args['id']  id of plugin to get
     * @return   array        item array, or false on failure
     */
    public function getPlugin($args)
        {
        // Argument check
        if (!isset($args['id']) || !is_numeric($args['id'])) {
            return LogUtil::registerArgsError();
        }

        // Return the item array
        $entity = $this->name . '_Entity_Plugins';
        $item = $this->entityManager->getRepository($entity)->findOneBy(array('id' => 25));

        return $item;
    }    

    /**
     * @desc    This method gets a the data of all plugins and is called at api->user->getBoxes and api->user->getOpenPlugins
     *
     * @return   array        plugins item array, or false on failure
     */    
    public function getPlugins()
        {
            $dql = "SELECT id FROM Dashboard_Entity_Plugins id";
            $dql .= " INDEX BY id.name";
            $em = ServiceUtil::getService('doctrine.entitymanager');
            $query = $em->createQuery($dql);
            $plugins =  $query->getArrayResult(); // hydrate result to array        
        /*
                foreach ($plugins as $plugin) {
                        $file = $plugin['file'];
                        Loader::requireOnce($PluginDir.'/'.$file);
                        $class='Plugin'.$classname;
                        $plugin = new $class();
                        $pName = $plugin->name();		
                }	
        */	
                return $plugins;
        }    


    /**
     * @desc    This method switches the postion of two boxes.
     *          It is called at controller->user->switchPositions.
     * 
     * @param int     $args['box1']     Identifier of the first box.
     * @param int     $args['box2']     Identifier of the second box.
     * @param int     $args['userid']   Box-owners Identifier. 
     * 
     * @return boolean.
     */ 
    public function switchPosition ($args)
        {
            // DEBUG: permission check aspect starts
            $this->throwForbiddenUnless(SecurityUtil::checkPermission('Dashboard::', '::', ACCESS_OVERVIEW));
            // DEBUG: permission check aspect ends

            // parameter specifying which type of objects we are treating
            $objectType = (isset($args['ot']) && !empty($args['ot'])) ? $args['ot'] : $this->request->getGet()->filter('ot', 'boxes', FILTER_SANITIZE_STRING);
            $utilArgs = array('controller' => 'user', 'action' => 'switch');
            if (!in_array($objectType, Dashboard_Util_Controller::getObjectTypes('controllerAction', $utilArgs))) {
                $objectType = Dashboard_Util_Controller::getDefaultObjectType('controllerAction', $utilArgs);
            }
            /** TODO: custom logic */
            $args['box1'] = FormUtil::getPassedValue('box1');
            $args['box2'] = FormUtil::getPassedValue('box2');
            $args['userid'] = FormUtil::getPassedValue('userid');
            // Get parameters
            $box1 = isset($args['box1']) ? $args['box1'] : false; 
            $box2 = isset($args['box2']) ? $args['box2'] : false; 
            $userid = isset($args['userid']) ? $args['userid'] : UserUtil::getVar('uid');                   

            // Little validation check
            if (($box1 == 0) || ($box2 == 0)) {
                return false;
            }
            // Get Objects
            $obj1 = $this->getBox(array('id' => $box1));
            $obj2 = $this->getBox(array('id' => $box2));

            // Security Check
            if (($obj1['userid'] != $obj2['userid']) || ($obj1['userid'] != $userid)) {
                    return false;
            }
            
            $dummy = $obj1['dbposition'];
            $obj1['dbposition'] = $obj2['dbposition'];
            $obj2['dbposition'] = $dummy;
            
            $obj1->persist;
            $obj2->persist;            
//
            $this->entityManager->flush();

            // Return result
            return true;
    }

    /**
     * @desc    This method gets all open plugins for a user or for the defaultConfig done by the admin.
     *          This means that only active and previously unused plugins are presented for selection.
     *          It is called at controller->user->main and controller->admin->defaultConfig.
     * 
     * @param int     $args['userid']   Identifier of the user. 
     * 
     * @return $results.
     */     
    public function getOpenPlugins($args)
        {
            $plugins = $this->getPlugins();
            $userid = $args['userid'];
            $onlySingle = isset($args['onlySingle']) ? $args['onlySingle'] : false;
            if (!isset($args['userid']) || $userid=="") {
                    $userid = UserUtil::getVar('uid');
            }
            $objectType = 'boxes';
            $entityClass = 'Dashboard_Entity_' . ucfirst($objectType);
            $repository = $this->entityManager->getRepository($entityClass);
            $where = "tbl.userid = $userid";
            $orderby = '';
            $boxes = $repository->selectWhereToArray($where, $orderby);              
            //$where = "udb_uid = $userid";
            //$boxes = DBUtil::selectObjectArray('userdashboard_boxes',$where);
            // Filter out used templates
            $results = array();	
            foreach ($plugins as $plugin) {
                    $found = false;
                if ($plugin['active'] == -1 || $plugin['active'] == 0) {
                    $found = true;
                } 
                    foreach ($boxes as $box) {
                                if ($box['plugin'] == $plugin['name']) {
                                        $found = true;
                                } elseif ($onlySingle && $plugin['dbsize'] != 1) {
                                        $found = true;
                                }
                        }
                    if (!$found) {
                            $results[] = $plugin;
                    }
            }       
            return $results;
    } 

    /**
     * @desc    This method is unused a.t.m.
     * 
     * @param  
     * 
     * @return 
     */     
    public function delete($args)
        {
            // Get Parameters
            $box = (string) $args['box'];
            $userid = (int) $args['userid'];
            $id  = (int) $args['id'];
            // Security Check
            if (!isset($box) || ($box == '') || ($id == 0)) {
                return false;
            }
            // Get Object
            $obj = DBUtil::selectObjectByID('dashboard_boxes',$id);
            if (!$obj) {
                    return false;
            } else {
                    if (($obj['plugin'] != $box) || ($uid != $obj['userid'])) {
                        return false;
                    } else {
    /*			
                            $plugin = DBUtil::selectObjectByID('userdashboard_plugins',$box,'name');
                            if (!$plugin) {
                                    return false;
                            }
                            Loader::includeOnce($plugin['file']);
                    $class=$plugin['name'];
                    $plugin = new $class();
                    $pName = $plugin->name();	  	  	

                            $metadata = 'box_'.$obj['plugin'].'_getMetaData';
                            $meta     = $metadata();

                            if ($meta['permanent']) {
                                    LogUtil::registerError(_BOXES_PERMAMENT_BOX_NODEL);
                                    return false;
                            }
    */
                            $result = DBUtil::deleteObject($obj,'dashboard_boxes');
                            return $result;
                    }
            }
    }  

    /**
     * @desc    This method uses Blockutil to include a block. It is called by every plugin which is block-based.
     * 
     * @param  string   $args['module']     The module which provides the block
     * @param  string   $args['blockname']  The specific block.
     * @param  string   $args['blockinfo']  Additional blockinfo. Unused a.t.m.
     * 
     * @return 
     */
    public function includeBlock($args)
        {
            $modname 	= $args['module'];
            $block	= $args['blockname'];
            $blockinfo 	= $args['blockinfo'];
            if (empty($modname) || $modname == 'Core') {
            $modname = 'Legacy';
        }
        global $blocks_modules;
        $display = BlockUtil::show($modname, $block,  $blockinfo);
        return $display;
	
        //$render = pnRender::getInstance('UserDashBoard');
        //$render->caching = false;
        //$render->assign($args);
        //return pnBlockShow ($args['module'],$args['blockname'],$args['blockinfo']);	
        //return $render->fetch('UserDashBoard_plugin_blockcall.htm');
    }    
  
    /**
     * @desc    Unused a.t.m.
     * 
     * @param  
     * 
     * @return 
     */  
    public function useTemplate($args)
        {
            $file = $args['file'];
            if (!isset($file) || ($file == '')) {
                return false;
            }
            //$render = pnRender::getInstance('Dashboard');
            if (isset($args['vars'])) {
                    $render->assign($args['vars']);
            }
            $file = 'plugins/plugin.'.$file.'.htm';
            // Assign to template
            $this->view->assign('file', $file);              
            // return template
            return $this->view->fetch('plugin/template.tpl');
    }

    /**
     * @desc    This method resets a users boxes to default if he has not choosen a box yet or has deleted all of his boxes and is calledd at controller->user->main.
     * 
     * @return  boolean
     */       
    /** TODO: delete a users old boxes if this method is called by controller->user->reset
     */
    public function reset($args)
        {
            // Check first if box was already added before
            $objectType = 'boxes';
            $entityClass = 'Dashboard_Entity_' . ucfirst($objectType);
            $repository = $this->entityManager->getRepository($entityClass);
            $where = "tbl.userid = '-1'";
            $orderby = '';
            $defaultboxes = $repository->selectWhereToArray($where, $orderby);   
            //$_defaultboxes = DBUtil::selectObjectArray('userdashboard_boxes',$where);
            // get all boxes for a user and delete these boxes
//('Dashboard','user','getBoxes',array('block'=>0,'uid'=>-1)); 
//
//  
//            $old = $this->getBoxes();
//            return true;
//            foreach ($old as $o) {
//                $result = DBUtil::deleteObject($o,'userdashboard_boxes');
//                if (!$result) {
//                            return false;
//                    }
//            }
            // iInsert new objects
            foreach ($defaultboxes as $dbox) {
                    $args = array (
                            'box' 	=> $dbox['plugin'],
                            'page' 	=> $dbox['page'],
                            'block'     => $dbox['block'],
                            'dbposition'=> $dbox['dbposition'],
                            'userid' 	=> UserUtil::getVar('uid')
                    );
                    $result = $this->addBox($args);
                    if (!$result) {
                        return false;
                    }
            }

            // Return success
            return true;
    }       
}
